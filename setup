#!/bin/sh
############################################################################################################
###   Исполняемый Файл для сборки и установки программ для Alsy Linux в формате Alsy Bundle              ###
###   Автор: Севастьянов Семен Владимирович                                                              ###
###   Дата: 19 сентября 2017 года                                                                        ###
###   Версия: 1.0.8                                                                                      ###
###   Дата последнего изменения: 04 сентября 2019 16:26 среда                                            ###
###   Как пользоваться данным файлом (setup):                                                            ###
###               1. Скачиваем исходники программы, например: readline-7.0.tar.gz                        ###
###               2. Распакуем файл readline-7.0.tar.gz например в директорию "/usr/src"                 ###
###               3. Открываем консоль                                                                   ### 
###               4. Выполняем команду: setup /usr/src/readline-7.0 0030                                 ###
###               5. Все готово! Теперь в директории "/usr/src",                                         ### 
###                  у нас лежит файл 0030-ALSY.readline-7.0.ab                                          ###
###                  и данный файл скопирован на флешку, после перезагрузки программа будет доступна     ###
###  Наслаждайтесь!!!                                                                                    ###
############################################################################################################
#Объявляем переменные
version=1.0.8
# В версии 1.0.1 исправлен баг связанный с удалением файла MakeFile в опр ситуациях
# подробнее ситуация описана ниже и выделена комментариями "FIX BUG:1 BEGIN" и "FIX BUG:1 END"
# В версии 1.0.2 добавлена возможность игнорировать ошибки помеченные так: "(ignored)"
# В версии 1.0.3 изменен способ копирования содержимого собранной программы, вместо копирования программы в /usr и /usr/local в этих директориях создаются символьные ссылки
# В версии 1.0.4 добавлен copyflag
# В версии 1.0.5 добавлена новая возможность сборки из архивного файла
# В версии 1.0.6 начата работа по созданию символьных ссылок при сборке программы, фактически развитие идеи версии 1.0.3, а также вывод инф о использовании программы и версии
# В версии 1.0.7 добавлены две новые опции
# В версии 1.0.8 добавлена новая опция
copyflag="0" 
AppFullName="$1"                                           # Полный путь и имя файла
if [ "$AppFullName" != "-v" ]; then
AppName="$(basename "$1")"                                 # Только имя файла без пути
fi
NumberAlsyBundleFile="$2"                                  # Номер файла Alsy Bundle
Options="$3"                                               # Опции для setup
AppPrefix="/usr/src/tools"                                 # Где в итоге будет программа !!! Внимание! Не меняйте данную директорию на системную, типа "/", "/lib64", "/usr" и т.д.
AppConfigScenario="configure --prefix=$AppPrefix/$AppName" # Сценарий конфигурации 
ConfigureFile="configure"
CurrDir="$(pwd)"

# Для версии 1.0.6 Добавлена возможность обхода всех папок программы и создания символьных ссылок на файлы
create_link()
{
CRT_LINK_PATH="$1"
SCRIPT_FILE="$3"

if [ "$SCRIPT_FILE" == "" ]; then
 SCRIPT_FILE="files.dat"
fi

echo "" > "$SCRIPT_FILE"

for DIR__ in $( ls -l -R "$CRT_LINK_PATH" | grep -E ':$' ) 
 do               
   DIR__="${DIR__%:*}"
   logic_create_dir="1"
   for FILE__ in $( ls "$DIR__/" ) 
     do
       if [ "$(ls -1 "$DIR__/$FILE__" | wc -l)" == "1" ]; then
         if [ "$(basename "$(ls -1 $DIR__/$FILE__)")" == "$FILE__" ]; then
           leng_str1="$(expr length $CRT_LINK_PATH)"
           leng_str2="$(expr length $DIR__/$FILE__)"
                     
           let cpl=leng_str2-leng_str1
           let pos=leng_str2-cpl                     
           
           fls="$DIR__/$FILE__"
           res_str=${fls:$pos:$cpl}
           
           cpl="$(expr length $res_str)"
           let cpl=cpl-1
           res_str2="${res_str:1:$cpl}"
           
#########################
## For create dir:
#########################
if [ "$logic_create_dir" == "1" ]; then
logic_create_dir="0"
           rlfile="$(basename $2/$res_str2)"
           rlpath="$2/$res_str2"
           l1="$(expr length $rlfile)"
           l2="$(expr length $rlpath)"
           let cpl=l2-l1
           rlpath=${rlpath:0:cpl}           
           echo "mkdir -p $rlpath" >> "$SCRIPT_FILE"
fi
           echo "ln -s $res_str" "$2/$res_str2" >> "$SCRIPT_FILE"
##########################
         fi
       fi
     done
 done
}

usage()
{
 echo -e "\e[36m usage:\e[32m setup\e[0m [\e[23msource_dir\e[0m] [nubmer bundle] [<Options>]"
 echo -e "\e[36m for example:\e[32m setup\e[0m \e[24mreadline-7.0\e[0m 0000"
 echo -e "\e[36m for example:\e[32m setup\e[0m \e[25mreadline-7.0\e[0m 0000 -x"
 echo -e "\e[36m for example:\e[32m setup\e[0m \e[26m/usr/src/alsy-source/readline-7.0\e[0m 0000"
 echo -e "\e[36m for example:\e[32m setup\e[0m \e[27m/usr/src/alsy-source/readline-7.0\e[0m 0000 -x"
 echo -e "\e[36m for get version info, usage:\e[32m setup\e[0m --version"
}

version()
{
 echo "$version"
}

help()
{
 echo ""
 echo " ###################################################################################"
 echo -e "\e[34m ### \e[0m  setup (version=$version) - compile program from source and build alsy bundle \e[34m###"
 echo -e "\e[31m ###\e[0m#############################################################################\e[31m###\e[00m"
 echo ""
 usage
 echo ""
 echo "Options: "
 echo "  -h,	--help   	display help message and exit"
 echo "  -v,	--version	display version information and exit"
 echo "  -x,	--xconfig	setup with non-standard configure from config.sh file"
 echo "  -n,	--not-configure	execute \"setup\" command without configure file"
 echo "  -i,	--only-install	execute \"setup\" command without configure file and make, only make install"
 echo "  -m,	--only-make-prefix	execute \"setup\" command without configure file and compile source as \"make\" and \"make install\" with prefix"
 echo ""
}

if [ "$AppFullName" == "" ]; then
  usage
  exit 0
fi

if [ "$AppFullName" == "--version" ]; then
  version
  exit 0
fi

if [ "$AppFullName" == "-v" ]; then
  version
  exit 0
fi

if [ "$AppFullName" == "--help" ]; then
  help
  exit 0
fi

if [ "$AppFullName" == '-h' ]; then
  help
  exit 0
fi

# Для версии 1.0.5 Здесь добавлена возможность сборки программы из архивного файла,
# Например так: setup util-linux-2.30.tar.xz 5060
# Для правильного выполнения такой команды необх находится в директории где лежит файл "util-linux-2.30.tar.xz"
# Начало:
check_path=${AppFullName:0:1}
if [ "$(echo "$check_path")" != '/' ];
then
  AppFullName=$CurrDir/"$AppFullName"
  echo $AppFullName
  if [ "$(ls -l "$AppFullName" | grep --regexp=.tar.xz"$" )" != "" ];
  then

   copylen="0"
   RAR_NAME="$(basename $AppFullName)"
   echo $RAR_NAME
   
   length_str1="$(expr length ".tar.xz")"
   length_str2="$(expr length $RAR_NAME)"
   let copylen=length_str2-length_str1
   result_str=${RAR_NAME:0:$copylen}
   echo $result_str
   
   length_str1="$(expr length $RAR_NAME)"
   length_str2="$(expr length $AppFullName)"     
   let copylen=length_str2-length_str1   
   result_str2=${AppFullName:0:$copylen}   
   
   AppFullName="$result_str2"$result_str
   echo $AppFullName
   
   tar -xf "$result_str2"$RAR_NAME
   cp -r "$result_str2"$RAR_NAME $AppFullName
  fi
  if [ "$(ls -l "$AppFullName" | grep --regexp=.tar.bz2"$" )" != "" ];
  then

   copylen="0"
   RAR_NAME="$(basename $AppFullName)"
   echo $RAR_NAME
   
   length_str1="$(expr length ".tar.bz2")"
   length_str2="$(expr length $RAR_NAME)"
   let copylen=length_str2-length_str1
   result_str=${RAR_NAME:0:$copylen}
   echo $result_str
   
   length_str1="$(expr length $RAR_NAME)"
   length_str2="$(expr length $AppFullName)"     
   let copylen=length_str2-length_str1   
   result_str2=${AppFullName:0:$copylen}   
   
   AppFullName="$result_str2"$result_str
   echo $AppFullName
   
   tar -xf "$result_str2"$RAR_NAME
   cp -r "$result_str2"$RAR_NAME $AppFullName
  fi  
  if [ "$(ls -l "$AppFullName" | grep --regexp=.tar.gz"$" )" != "" ];
  then

   copylen="0"
   RAR_NAME="$(basename $AppFullName)"
   echo $RAR_NAME
   
   length_str1="$(expr length ".tar.gz")"
   length_str2="$(expr length $RAR_NAME)"
   let copylen=length_str2-length_str1
   result_str=${RAR_NAME:0:$copylen}
   echo $result_str
   
   length_str1="$(expr length $RAR_NAME)"
   length_str2="$(expr length $AppFullName)"     
   let copylen=length_str2-length_str1   
   result_str2=${AppFullName:0:$copylen}   
   
   AppFullName="$result_str2"$result_str
   echo $AppFullName
   
   tar -xf "$result_str2"$RAR_NAME
   cp -r "$result_str2"$RAR_NAME $AppFullName
  fi
fi
#Конец:

#Удаляем все логи от предыдущих сборок из исходников программы
rm -r $AppFullName/setup_all.log 2>/dev/null
rm -r $AppFullName/setup_config.log 2>/dev/null
rm -r $AppFullName/setup_config_err.log 2>/dev/null
rm -r $AppFullName/setup_compile.log 2>/dev/null
rm -r $AppFullName/setup_compile_err.log 2>/dev/null
rm -r $AppFullName/setup_install.log 2>/dev/null
rm -r $AppFullName/setup_install_err.log 2>/dev/null

#Запись в лог о скрипте сборки
echo "************************************************************************************************" >$AppFullName/setup_all.log
echo "$(date) : Starting Alsy Bundle Setup script version: $version" >>$AppFullName/setup_all.log
echo "$(uname -a)" >>$AppFullName/setup_all.log
echo "$AppFullName" >>$AppFullName/setup_all.log
echo "$AppName" >>$AppFullName/setup_all.log
echo "$NumberAlsyBundleFile" >>$AppFullName/setup_all.log
echo "************************************************************************************************" >>$AppFullName/setup_all.log

if [ "$Options" == "--not-configure" ]; then
  Options="-n"
fi

if [ "$Options" == "--only-install" ]; then
  Options="-i"
fi

if [ "$Options" == "--xconfig" ]; then
  Options="-x"
fi

if [ "$Options" == "--only-make-prefix" ]; then
  Options="-m"
fi

if [ "$Options" == "-x" ]; then
  AppConfigScenario="config.sh"
  ConfigureFile="$AppConfigScenario"
  echo $AppConfigScenario
else
  if [ "$(ls -1 | grep --regexp=autogen.sh"$" 2>/dev/null)" != "" ]; then
    AppConfigScenario="autogen.sh"
    ConfigureFile="$AppConfigScenario"
  fi
fi
echo "$AppConfigScenario" >> $AppFullName/setup_all.log

#Переходим в директорию с исходниками программы
cd $AppFullName >>$AppFullName/setup_all.log

if [[ "$Options" != "-n"  && "$Options" != "-i" && "$Options" != "-m" ]]; then
  #Если файл конфигурации отсутствует, то прекращаем
  if [ "$(ls -1 | grep "$ConfigureFile" 2>/dev/null)" == "" ]; then
    echo "Error: Configure file $ConfigureFile does not exists!"
    echo "Error: Configure file $ConfigureFile does not exists!" >>$AppFullName/setup_all.log
    exit
  fi
fi

if [[ "$Options" != "-n"  && "$Options" != "-i" && "$Options" != "-m" ]]; then
  #Проверяем наличие Makefile, если есть ничего страшного, просто подчистим старые настройки и удалим его
  if [ "$(ls -1 | grep --regexp=Makefile"$" 2>/dev/null)" != "" ]; then 
    make clean >>$AppFullName/setup_all.log 2>/dev/null
#FIX BUG:1 BEGIN
#  Столкнулся с такой ситуацией, что конфигурационного файла вообще нет, а есть только MakeFile,
#  соотв здесь он просто удалялся и все как говорится, привет на этом, поэтому решено предварительно его копировать здесь в файл
#  с именем .MakeFile.alsycpmake

    cp -r Makefile $AppFullName/.Makefile.alsycpmake 2>/dev/null
    
#  что нам это дает? 
#  А дает нам это то, что теперь после того как выполнится конфигурация 
#  и мы увидем ситуацию когда ошибок нет, 
#  а при этом файл MakeFile отсутствует (чего быть не должно если конфига родная и/или правильная) то мы в таком случае его сможем восстановить 
#FIX BUG:1 END

    rm -r Makefile 2>/dev/null
  fi
fi

echo "************************************************************************************************" >>$AppFullName/setup_all.log
echo "****  CONFIGURE SCRIPT START                                                               *****" >>$AppFullName/setup_all.log
echo "************************************************************************************************" >>$AppFullName/setup_all.log

if [[ "$Options" != "-n" && "$Options" != "-i" && "$Options" != "-m" ]]; then
  #Выполняем конфигурацию программы
  #./configure --prefix=$AppPrefix/$AppName
  if [ "$Options" == "-d" ]; then  \
    echo "disabled configure"
  else
    ./$AppConfigScenario >> $AppFullName/setup_all.log > $AppFullName/setup_config.log 2> $AppFullName/setup_config_err.log
    if [ "$ConfigureFile" == "autogen.sh" ]; then
    #After run autogen.sh if true: Now you are ready to run ./configure
      AppConfigScenario="configure --prefix=$AppPrefix/$AppName"
      ConfigureFile="configure"
      ./$AppConfigScenario >> $AppFullName/setup_all.log > $AppFullName/setup_config.log 2> $AppFullName/setup_config_err.log
    fi
  fi

  #FIX BUG:1 BEGIN
  #Проверяем наличие Makefile
  if [ "$(ls -1 | grep --regexp=Makefile"$" 2>/dev/null)" == "" ]; then 
    cp -r $AppFullName/.Makefile.alsycpmake Makefile
  fi
  #FIX BUG:1 END

  #Проверяем наличие Makefile
  if [ "$(ls -1 | grep --regexp=Makefile"$" 2>/dev/null)" == "" ]; then 
    echo "$(less ALSYBUILDPATH)"
    ALSYBUILDPATH="$(less ALSYBUILDPATH)"
    if [ "$ALSYBUILDPATH" == "" ]; then
      echo "Error: Makefile "Makefile.in" does not exists!"
      exit
    else
      cd "$ALSYBUILDPATH"
    fi 
  fi
fi

echo "************************************************************************************************" >>$AppFullName/setup_all.log
echo "****  MAKEFILE SCRIPT START                                                                *****" >>$AppFullName/setup_all.log
echo "************************************************************************************************" >>$AppFullName/setup_all.log

declare makeprefix=""
if [ "$Options" == "-m" ]; then
  echo "make PREFIX=$AppPrefix/$AppName"
  makeprefix="PREFIX=$AppPrefix/$AppName"
fi

if [ "$Options" != "-i" ]; then
# Команда компилятору выполнить сборку

  make $makeprefix >> $AppFullName/setup_all.log > $AppFullName/setup_compile.log 2> $AppFullName/setup_compile_err.log

# Также проверим логи, иногда в процессе установки возникают ошибки
  if [ "$(grep -i "make" $AppFullName/setup_compile_err.log | grep -i error 2>/dev/null)" != "" ]; then
    if [ "$(grep -i "make" $AppFullName/setup_compile_err.log | grep -i error | grep '(ignored)' 2>/dev/null)" != "" ]; then
      echo "Error ignored!"
    else
      echo "Error: Compilation finished with error! Look setup_compile_err.log for more info!"
      exit
    fi  
  fi
fi

#Перед установкой очищаем от предыдущих установок
if [ "$(ls -1 $AppPrefix | grep $AppName 2>/dev/null)" != "" ]; then 
rm -rd $AppPrefix/$AppName
fi


echo "************************************************************************************************" >>$AppFullName/setup_all.log
echo "****  MAKEFILE INSTALL SCRIPT START                                                        *****" >>$AppFullName/setup_all.log
echo "************************************************************************************************" >>$AppFullName/setup_all.log

#Команда - установить ранее собранную программу, в соотв с ранее произв конфигурацией
if [ "$makeprefix" == "" ]; then
  make install >>$AppFullName/setup_all.log > $AppFullName/setup_install.log 2> $AppFullName/setup_install_err.log
else
  echo "make $makeprefix install"
  make "$makeprefix" install >>$AppFullName/setup_all.log > $AppFullName/setup_install.log 2> $AppFullName/setup_install_err.log
fi

#Если все хорошо то у нас появляется директория $AppPrefix/$AppName, проверим это:
if [ "$(ls -1 $AppPrefix | grep $AppName 2>/dev/null)" == "" ]; then 
   echo "Error: Compilation finished with error! Look *.log files for more info!"
   exit
fi

#Также проверим логи, иногда в процессе установки возникают ошибки
if [ "$(grep -i "make" $AppFullName/setup_install_err.log | grep -i error 2>/dev/null)" != "" ]; then
  if [ "$(grep -i "make" $AppFullName/setup_install_err.log | grep -i error | grep "(ignored)" 2>/dev/null)" != "" ]; then
    echo "Error ignored!"
  else  
    echo "Error: Installation finished with error! Look setup_install_err.log for more info!"
    exit
  fi  
fi

echo "************************************************************************************************" >>$AppFullName/setup_all.log
echo "****  FINISH                                                                               *****" >>$AppFullName/setup_all.log
echo "************************************************************************************************" >>$AppFullName/setup_all.log


#Выходим из директории с программой
cd $AppFullName
cd ..

#Если, вдруг, остались файлы от предыдущих установок, то надо их удалить
if [ "$(ls -1 -a | grep .new_install 2>/dev/null)" != "" ]; then
rm -rd .new_install
fi

#Создаем директорию для новой программы
mkdir -p .new_install/$AppPrefix

#Создаем директорию для исходных кодов программы
mkdir -p .new_install/usr/src/alsy-source

#Создаем еще одну директорию в которую устанавливается большинство библиотек по умолчанию
mkdir -p .new_install/usr/local

#Копируем программу в эту директорию
cp -rd $AppPrefix/$AppName .new_install/$AppPrefix

#Копируем исходные коды программы
cp -rd $AppFullName .new_install/usr/src/alsy-source

#Если в программе есть папка lib, то ее надо скопировать в lib64
if [ "$(ls -1 .new_install/$AppPrefix/$AppName | grep lib 2>/dev/null)" != "" ]; then
 #Проверим сначала что такой папки еще нет
 if [ "$(ls -1 .new_install/$AppPrefix/$AppName | grep lib64 2>/dev/null)" == "" ]; then
   cp -r .new_install/$AppPrefix/$AppName/lib .new_install/$AppPrefix/$AppName/lib64
 fi  
fi

#Теперь копируем содержимое папки программы в "корень"^1 и в "/usr"^2 и в "/usr/local"
if [ "$copyflag" == "1" ]; then

  cp -r .new_install/$AppPrefix/$AppName/* .new_install/usr/local
  cp -r .new_install/$AppPrefix/$AppName/* .new_install/usr

else
# Новшество для версии 1.0.6, вместо копирования создаем символьные ссылки на все файлы для директории ".new_install/usr/local"
  create_link ".new_install/$AppPrefix/$AppName" ".new_install/usr/local" "alsy.create.link"
  chmod u+rwx alsy.create.link

# Новшество для версии 1.0.6, вместо копирования создаем символьные ссылки на все файлы ".new_install/usr"
  create_link ".new_install/$AppPrefix/$AppName" ".new_install/usr" "alsy.create.link.two"
  chmod u+rwx alsy.create.link.two

# Выполняем заранее подготовленные скрипты
  ./alsy.create.link
  ./alsy.create.link.two
fi

cp -rLd .new_install/$AppPrefix/$AppName/* .new_install

#Теперь - финальная стадия - создаем файл Alsy Bundle
#dir2sb .new_install $2-ALSY.$AppName.ab
mksquashfs .new_install $2-ALSY.$AppName.ab -comp xz -b 512K

#И Удаляем временную директорию программы
rm -rd .new_install

#Удаляем файлы программы из установочной директории
rm -rd $AppPrefix/$AppName

#Выполняем установку программы в операционную систему
cp -r $2-ALSY.$AppName.ab /mnt/live/memory/data/alsylin/modules

exit
############################################################################################################
###   Пояснения: ^1 - Корень директории, имеется ввиду условный корень,                                  ###
###              то есть корневой, данная директория будет после монтирования Alsy Bundle                ###
###              ^2 - Аналогично пояснению 1, директория "/usr" подразумевается условная директория,     ###
###                   которая физически будет таковой, только после монтирования                         ###
############################################################################################################
