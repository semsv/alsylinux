#!/bin/bash
# Alsy management and control script
# Author: Tomas M <http://www.slax.org/>
# Corrected for Alsy: Sevastyanov S.V.
# TODO: lock by creating a directory to allow only single run of this script?

LIVE=/mnt/live/memory
COMMAND="$1"
PARAM="$2"
TARGET="$3"
LASTDOWNLOAD=""
GUI=${GUI:-""}
AUTODEPS=${AUTODEPS:-""}
SILENT=${SILENT:-""}
SYSTRAY=${SYSTRAY:-""}

if [ "$(echo "$1" | egrep "^activate://")" != "" ]; then
   COMMAND="activate"
   PARAM="$(echo "$1" | cut -b 12-)"
   GUI="true"
   AUTODEPS="true"
fi

if [ "$(echo "$1" | egrep "^deactivate://")" != "" ]; then
   COMMAND="deactivate"
   PARAM="$(echo "$1" | cut -b 14-)"
   GUI="true"
fi

if [ "$GUI" -a "$SYSTRAY" = "" ]; then
   exec ksystraycmd --ownicon --icon preferences-web-browser-cache --tooltip "in progress: alsy $COMMAND $PARAM $TARGET" \
   SYSTRAY=true SILENT=$SILENT GUI=$GUI AUTODEPS=$AUTODEPS \
   alsy "$COMMAND" "$PARAM" "$TARGET"
fi

PARAMREG="$(echo "$PARAM" | sed -r "s/[+]/[+]/g")"


# Usage info
#
usage()
{
    echo "Control script v1.0 for Alsy. Provides way for obtaining new software,"
    echo "downloading and uploading Alsy build scripts to Alsy server, and more."
    echo ""
    echo "Usage:"
    echo ""
    echo "     # alsy [ options ]"
    echo ""
    echo "Explanation:"
    echo ""
    echo "     # alsy [ options ]"
    echo ""
    echo "          # alsy info [ name ]"
    echo "             - print info about given Alsy bundle"
    echo "             - if no name is provided, print info about activated bundles"
    echo ""
    echo "          # alsy activate [ name | filename ]"
    echo "             - activate Alsy Bundle given by filename (already downloaded), or"
    echo "             - download and activate the bundle given by name from Alsy server"
    echo ""
    echo "          # alsy deactivate [ name ]"
    echo "             - deactivate given Alsy bundle"
    echo "               (detach from filesystem, but keep downloaded file)"
    echo ""
    echo "Remarks:"
    echo "     [ name ] has to be the unique name of alsy bundle, without .ab extension"
    echo "     [ filename ] has to be real file on filesystem, with .ab extension"

    if [ "$1" != "" ]; then
       echo
       echo "--"
       echo "Error: $1"
       if [ "$GUI" ]; then
          die "Error: $1"
       fi
    fi
    exit 1
}

F1=/tmp/alsy-$$-in.tmp
F2=/tmp/alsy-$$-out.tmp
trap "rm -f $F1 $F2" EXIT

# Print error message and exit
# $1 = error message
#
die()
{
   echo "$1" >&2
   if [ "$GUI" = "true" ]; then
      kdialog --caption "Error" --error "$1" >/dev/null 2>&1
   fi
   exit 10
}

# Print question and return answer
# $1 = question message
#
question()
{
   local RET JUNK

   echo >&2
   echo -ne "$1 [yes/no]: " >&2
   if [ "$GUI" = "true" ]; then
      kdialog --caption "Question" --yesno "$1" >/dev/null 2>&1
      RET=$?
   else
      read JUNK
      if [ "$JUNK" = "Y" -o "$JUNK" = "y" -o "$JUNK" = "yes" -o "$JUNK" = "YES" ]; then
         RET=0
      else
         RET=1
      fi
   fi

   echo "$RET"
}

# return file size
# $1 = file whose size we are after
file_size()
{
   stat --printf "%s" "$1" 2>/dev/null
   if [ $? -ne 0 ]; then
      echo '-1'
   fi
}

# Return infos about current Alsy (architecture, version, etc)
# so the server can decide what precompiled bundle to send
#
infos()
{
   echo "arch=$(urlencode "$(uname -m)")&version=$(urlencode "$(cat /etc/alsy-version 2>/dev/null)")&ram=$(urlencode "$(free | awk '/Mem:/ {print $2}')")&cmdline=$(urlencode "$(cat /proc/cmdline)")"
}

# Check if parameter is empty. If yes, print error and exit
# $1 = parameter
# $2 = message is empty
#
need()
{
   if [ "$1" = "" ]; then
      usage "$2"
   fi
}

# returns writable directory outside of AUFS root
# where Alsy Bundle can be safely stored
#
get_bundle_storage_dir()
{
   local TGT

   TGT=$LIVE/data/alsylin/modules

   mkdir -p $TGT 2>/dev/null
   touch $TGT/.empty 2>/dev/null && rm $TGT/.empty 2>/dev/null
   if [ $? -ne 0 ]; then
      TGT=$LIVE/modules
      mkdir -p $TGT
   fi

   echo $TGT
}

# Activate Alsy Bundle
# $1 = file to activate
#
activate()
{
   local SB TGT BAS Q DEPS DEPSCOUNT i

   SB="$(readlink -f "$1")"
   BAS="$(basename "$SB")"

   # check if file exists
   if [ ! -r "$SB" ]; then
      usage "file not found $SB"
   fi

   # check if file is in aufs union - if yes, move outside
   if [ -r "$LIVE/changes/$SB" ]; then
      TGT="$(get_bundle_storage_dir)"
      echo "File stored inside Alsy filesystem couldn't be activated, moving to $TGT, then activating from there"
      mv -n "$SB" "$TGT/$BAS"
      if [ $? -ne 0 ]; then
         die "Error moving Alsy bundle to $TGT/$BAS. Not enough space or target already exists"
      fi
      SB="$TGT/$BAS"
   fi

   # check if this particular file is already activated
   if print_branches | cut -f 2 | fgrep -q "$SB"; then
      Q="$(question "Alsy bundle already active: $BAS\nDeactivate it now?")"
      if [ "$Q" = "0" ]; then # yes
         deactivate "$1"
      fi
      exit # module remains active or was deactivated
   fi

   # mount remount,add
   TGT="$LIVE/bundles/$BAS"
   mkdir -p "$TGT"

   mount -n -o loop,ro "$SB" "$TGT"
   if [ $? -ne 0 ]; then
      die "Error mounting of the bundle, perhaps corrupted download"
   fi

   # add current branch to aufs union
   mount -t aufs -o remount,add:1:"$TGT" aufs /
   if [ $? -ne 0 ]; then
      umount "$TGT"
      rmdir "$TGT"
      die "Error attaching bundle filesystem to Alsy"
   fi

   if [ "$(find "$TGT/usr/share/applications/" -name "*.desktop" -type f 2>/dev/null)" != "" ]; then
      kbuildsycoca4 >/dev/null 2>&1
   fi

   echo "Alsy Bundle activated: $BAS"

   if [ -r "$TGT/run/activate.sh" ]; then
      echo "Executing post-activation script..."
      sh "$TGT/run/activate.sh"
   fi

   if [ "$GUI" -a ! "$SILENT" ]; then
      kdialog --title " " --passivepopup "Alsy bundle activated:\n$BAS" 2 2>/dev/null
   fi
}


# Deactivate Alsy bundle of the given name
# $1 = path to bundle file, or its name
#
deactivate()
{
   local BUNDLES SB AB NSB MATCH LOOP LOOPFILE

   BUNDLES=$LIVE/bundles
   MODULES=$LIVE/modules
   SB="$(basename "$1")"
   AB=".ab"
   NSB="${SB%.*}"
   
   rm -rd "$BUNDLES/$SB" 2>/dev/null    # this fails unless the dir is
   rm -rd "$BUNDLES/$NSB" 2>/dev/null # forgotten there empty. It's safe this way
   
   if [ ! -d "$BUNDLES/$SB" ]; then
      # we don't have real filename match, lets try to add .sb extension
      if [ ! -d "$BUNDLES/$NSB" ]; then
        die "can't find active alsy bundle $1"
      else
         SB="$NSB"
      fi
   fi
   
   if [ "$SB" = "" -o ! -d "$BUNDLES/$SB" ]; then
      die "can't find active alsy bundle $1"
   fi

   if [ -r "$BUNDLES/$SB/run/deactivate.sh" ]; then
      echo "Executing bundle's deactivate script ..."
      sh "$BUNDLES/$SB/run/deactivate.sh"
   fi

   echo "Attempting to deactivate Alsy bundle $SB..."
   mount -t aufs -o remount,verbose,del:"$BUNDLES/$SB" aufs / 2>/dev/null
   if [ $? -ne 0 ]; then
      die "Unable to deactivate Alsy Bundle - still in use. See dmesg for more."
   fi

   # remember what loop device was the bundle mounted to, it may be needed later
   LOOP="$(cat /proc/mounts | fgrep " $BUNDLES/$SB " | cut -d " " -f 1)"
   LOOPFILE="$(losetup "$LOOP" | cut -d " " -f 3 | sed -r 's:^.|.$::g')"

   umount "$BUNDLES/$SB" 2>/dev/null
   if [ $? -ne 0 ]; then
      die "Unable to umount Alsy bundle loop-mount $BUNDLES/$SB"
   fi
   rmdir "$BUNDLES/$SB"

   # free the loop device manually since umount fails to do that if the bundle was activated on boot
   losetup -d "$LOOP" 2>/dev/null

   # remove the .ab file, but keep it if deactivate was issued on full ab real path
   Q="$(question "Alsy bundle: $SB\n File will be moved to deactivated modules\nMove it now?")"
   if [ "$Q" = "0" ]; then # yes
     mkdir -p "$MODULES/deactivate"
     mv -v "$LOOPFILE" "$MODULES/deactivate/"
   fi

   echo "Alsy Bundle deactivated: $SB"
   if [ "$GUI" ]; then
      kdialog --title " " --passivepopup "Alsy Bundle deactivated: $SB" 2 2>/dev/null
   fi
}

print_branches()
{
   local SI BUNDLE LOOP CWD

   SI="/sys/fs/aufs/$(cat /proc/mounts | grep 'aufs / aufs' | egrep -o 'si=([^,) ]+)' | tr = _)"
   CWD="$(pwd)"
   cd "$SI"
   ls -v1 | grep -v xi_path | egrep 'br[0-9]+' | xargs cat | grep memory/bundles | rev | cut -b 4- | rev | while read BUNDLE; do
      if mountpoint -q "$BUNDLE"; then
         LOOP=$(cat /proc/mounts | fgrep " $BUNDLE squashfs" | cut -d " " -f 1)
         echo -n "$BUNDLE"
         echo -ne "\t"
         losetup $LOOP | sed -r "s:.*[(]|[)].*::g"
      fi
   done | tac
   cd "$CWD"
}

print_active_bundle_ids()
{
   print_branches | cut -f 1 | sed -r "s:^$LIVE/bundles/::" | sed -r 's:[^0-9]+.*:/:'
}


case "$COMMAND" in

   'info')
      if [ "$PARAM" = "" ]; then
         print_branches
      else
         get "$COMMAND $PARAM"
         process
      fi
   ;;

   'activate')
      activate "$PARAM"
   ;;

   'deactivate')
      deactivate "$PARAM"
   ;;

   'scinfo')
      echo "[$(cat /etc/alsy-version)]"
      print_active_bundle_ids
   ;;

   *)
      usage
   ;;
esac
